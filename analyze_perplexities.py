import matplotlib.pyplot as plt
import io
import sys
import numpy as np
from itertools import count
from numpy import mean
from numpy import log10

# USAGE:
# interpret and plot the results generated by predictor_tables


def analyze_perplexities(file):
    predictor_names, table = read_table(file, 10)
    perplexities = map(perdictor_perplexity, columns(table))
    plot_bars("Perplexity", perplexities, predictor_names)


def plot_bars(ylabel, values, labels):
    fig, ax = plt.subplots()
    # plt.xticks(rotation=-90)
    ax.set_ylabel(ylabel)
    width = 0.25
    ind = np.arange(len(values))
    xticks = ind + width
    ax.set_xticks(xticks)
    ax.bar(xticks, values, width / 2, color='y')
    ax.set_xticklabels(labels)
    plt.xlim(xticks[0] - width, xticks[-1] + width)
    plt.show()


def perdictor_perplexity(predictor_probs):
    return 10.0 ** -mean(log10(predictor_probs))


def columns(table):
    return zip(*table)


def read_table(file, max_rows=None, separator=u","):
    header = file.readline()[:-1].split(separator)[3:]
    table = []
    for i in count():
        row = file.readline()[:-1].split(separator)
        if not row or i > max_rows:
            break
        word_info, probs = row[:3], map(float, row[3:])

        if not all(probs):
            print >>sys.stderr, "Error in word", word_info[1:3], probs

        table.append(probs)
    return header, table


if __name__ == "__main__":
    stdin = io.open(sys.stdin.fileno(), "r", encoding="utf-8")
    analyze_perplexities(stdin)
