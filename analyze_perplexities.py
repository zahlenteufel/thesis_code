import matplotlib.pyplot as plt
import io
import sys
import numpy as np
from numpy import mean
from numpy import log10
from itertools import izip
import argparse


def analyze_perplexities_with_and_without_cache(file, plot_results, print_header):
    predictor_names, table = read_table(file)
    cols = columns(table)
    predictions = cols[2:]
    predictor_names = predictor_names[2:]
    print predictor_names
    cache_pred = cols[1]
    interpolated_predictions = map(
        lambda column: interpolated_with_cache_probability(0.22, cache_pred, column),
        predictions
    )
    perplexities1 = map(predictor_perplexity, predictions)
    perplexities2 = map(predictor_perplexity, interpolated_predictions)
    print_perplexities(perplexities1, perplexities2, predictor_names, print_header)
    if plot_results:
        plot_bars("Perplejidad (menos es mejor)", perplexities1, perplexities2, predictor_names)


def analyze_perplexities_only(file):
    predictor_names, table = read_table(file)
    cols = columns(table)
    # (first column = cloze_prob, second_column = cache_prob)
    predictions = cols[2:]
    predictor_names = predictor_names[2:]
    perplexities = map(predictor_perplexity, predictions)
    plt.close()
    fig, ax = plt.subplots()
    plt.xticks(rotation=90)
    ax.set_ylabel("Perplexity (menos es mejor)")
    width = 0.25
    ind = np.arange(len(perplexities))
    xticks = ind
    ax.set_xticks(ind)
    ax.bar(ind, perplexities, width, color='y')
    ax.set_xticklabels(map(lambda label: label.split("/")[-1], predictor_names))
    plt.xlim(xticks[0] - width, xticks[-1] + width)
    plt.grid(True)
    plt.tight_layout()
    plt.show()


def print_perplexities(perplexities, perplexities_with_cache, predictor_names, print_header):
    if print_header:
        for predictor_name in predictor_names:
            name = predictor_name.split("/")[-1]
            print name, name + "_cache",
        print
    for ppl, ppl_cache in izip(perplexities, perplexities_with_cache):
        print ppl, ppl_cache,
    print


def interpolated_with_cache_probability(cache_lambda, cache_probs, column, geometric_combination=False):
    if geometric_combination:
        return [cache_prob ** cache_lambda * field ** (1 - cache_lambda) for cache_prob, field in zip(cache_probs, column)]
    else:
        return [cache_lambda * cache_prob + (1 - cache_lambda) * field for cache_prob, field in zip(cache_probs, column)]


def plot_bars(ylabel, values, values2, labels):
    plt.close()
    fig, ax = plt.subplots()
    plt.xticks(rotation=90)
    ax.set_ylabel(ylabel)
    width = 0.25
    ind = np.arange(len(values))
    xticks = ind
    ax.set_xticks(ind)
    ax.bar(ind, values, width / 2, color='y')
    ax.bar(ind, values2, width / 2, color='#808000')
    ax.set_xticklabels(map(lambda label: label.split("/")[-1], labels))
    plt.xlim(xticks[0] - width, xticks[-1] + width)
    plt.grid(True)
    plt.tight_layout()
    plt.show()


def predictor_perplexity(predictor_probs):
    return 10.0 ** -mean(log10(predictor_probs))


def columns(table):
    return map(list, zip(*table))


def read_table(file, separator=u","):
    header = file.readline()[:-1].split(separator)
    table = []
    while True:
        row = file.readline()[:-1].split(separator)
        if len(row[0]) == 0:
            break
        probs = map(float, row)

        table.append(probs)
    return header, table


def parse_arguments():
    parser = argparse.ArgumentParser(
        description="Interpret and plot the results generated by predictor_tables.py")
    parser.add_argument("-p", "--plot_results", action="store_true",
                        help="Also plot the results.")
    parser.add_argument("-ph", "--print_header", action="store_true",
                        help="Output the header, useful to store a csv.")
    parser.add_argument("-n", "--no_cache_comparison", action="store_true",
                        help="Don't analyse with cache.")
    return parser.parse_args()


if __name__ == "__main__":
    arguments = parse_arguments()

    file = io.open(sys.stdin.fileno(), "r", encoding="utf-8")
    if arguments.no_cache_comparison:
        analyze_perplexities_only(file)
    else:
        analyze_perplexities_with_and_without_cache(file, arguments.plot_results, arguments.print_header)
